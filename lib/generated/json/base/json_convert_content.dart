// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:shop/root/home/model/banner_bean_entity.dart';
import 'package:shop/generated/json/banner_bean_entity_helper.dart';
import 'package:shop/root/home/model/category_bean_entity.dart';
import 'package:shop/generated/json/category_bean_entity_helper.dart';
import 'package:shop/root/home/model/shop_bean_entity.dart';
import 'package:shop/generated/json/shop_bean_entity_helper.dart';
import 'package:shop/root/home/shopx_entity.dart';
import 'package:shop/generated/json/shopx_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case BannerBeanEntity:
			return bannerBeanEntityFromJson(data as BannerBeanEntity, json) as T;			case BannerBeanData:
			return bannerBeanDataFromJson(data as BannerBeanData, json) as T;			case CategoryBeanEntity:
			return categoryBeanEntityFromJson(data as CategoryBeanEntity, json) as T;			case CategoryBeanData:
			return categoryBeanDataFromJson(data as CategoryBeanData, json) as T;			case ShopBeanEntity:
			return shopBeanEntityFromJson(data as ShopBeanEntity, json) as T;			case ShopBeanData:
			return shopBeanDataFromJson(data as ShopBeanData, json) as T;			case ShopBeanDataSetmeal:
			return shopBeanDataSetmealFromJson(data as ShopBeanDataSetmeal, json) as T;			case ShopBeanDataManystoretap:
			return shopBeanDataManystoretapFromJson(data as ShopBeanDataManystoretap, json) as T;			case ShopBeanDataManystore:
			return shopBeanDataManystoreFromJson(data as ShopBeanDataManystore, json) as T;			case ShopxEntity:
			return shopxEntityFromJson(data as ShopxEntity, json) as T;			case ShopxData:
			return shopxDataFromJson(data as ShopxData, json) as T;			case ShopxDataManystoretapsText:
			return shopxDataManystoretapsTextFromJson(data as ShopxDataManystoretapsText, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case BannerBeanEntity:
			return bannerBeanEntityToJson(data as BannerBeanEntity);			case BannerBeanData:
			return bannerBeanDataToJson(data as BannerBeanData);			case CategoryBeanEntity:
			return categoryBeanEntityToJson(data as CategoryBeanEntity);			case CategoryBeanData:
			return categoryBeanDataToJson(data as CategoryBeanData);			case ShopBeanEntity:
			return shopBeanEntityToJson(data as ShopBeanEntity);			case ShopBeanData:
			return shopBeanDataToJson(data as ShopBeanData);			case ShopBeanDataSetmeal:
			return shopBeanDataSetmealToJson(data as ShopBeanDataSetmeal);			case ShopBeanDataManystoretap:
			return shopBeanDataManystoretapToJson(data as ShopBeanDataManystoretap);			case ShopBeanDataManystore:
			return shopBeanDataManystoreToJson(data as ShopBeanDataManystore);			case ShopxEntity:
			return shopxEntityToJson(data as ShopxEntity);			case ShopxData:
			return shopxDataToJson(data as ShopxData);			case ShopxDataManystoretapsText:
			return shopxDataManystoretapsTextToJson(data as ShopxDataManystoretapsText);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'BannerBeanEntity':
			return BannerBeanEntity().fromJson(json);			case 'BannerBeanData':
			return BannerBeanData().fromJson(json);			case 'CategoryBeanEntity':
			return CategoryBeanEntity().fromJson(json);			case 'CategoryBeanData':
			return CategoryBeanData().fromJson(json);			case 'ShopBeanEntity':
			return ShopBeanEntity().fromJson(json);			case 'ShopBeanData':
			return ShopBeanData().fromJson(json);			case 'ShopBeanDataSetmeal':
			return ShopBeanDataSetmeal().fromJson(json);			case 'ShopBeanDataManystoretap':
			return ShopBeanDataManystoretap().fromJson(json);			case 'ShopBeanDataManystore':
			return ShopBeanDataManystore().fromJson(json);			case 'ShopxEntity':
			return ShopxEntity().fromJson(json);			case 'ShopxData':
			return ShopxData().fromJson(json);			case 'ShopxDataManystoretapsText':
			return ShopxDataManystoretapsText().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'BannerBeanEntity':
			return List<BannerBeanEntity>();			case 'BannerBeanData':
			return List<BannerBeanData>();			case 'CategoryBeanEntity':
			return List<CategoryBeanEntity>();			case 'CategoryBeanData':
			return List<CategoryBeanData>();			case 'ShopBeanEntity':
			return List<ShopBeanEntity>();			case 'ShopBeanData':
			return List<ShopBeanData>();			case 'ShopBeanDataSetmeal':
			return List<ShopBeanDataSetmeal>();			case 'ShopBeanDataManystoretap':
			return List<ShopBeanDataManystoretap>();			case 'ShopBeanDataManystore':
			return List<ShopBeanDataManystore>();			case 'ShopxEntity':
			return List<ShopxEntity>();			case 'ShopxData':
			return List<ShopxData>();			case 'ShopxDataManystoretapsText':
			return List<ShopxDataManystoretapsText>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}