// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:shop/root/home/category_entity.dart';
import 'package:shop/generated/json/category_entity_helper.dart';
import 'package:shop/root/home/shop_entity.dart';
import 'package:shop/generated/json/shop_entity_helper.dart';
import 'package:shop/root/home/shop_detail_entity.dart';
import 'package:shop/generated/json/shop_detail_entity_helper.dart';
import 'package:shop/root/home/shopx_entity.dart';
import 'package:shop/generated/json/shopx_entity_helper.dart';
import 'package:shop/root/home/banner_entity.dart';
import 'package:shop/generated/json/banner_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case CategoryEntity:
			return categoryEntityFromJson(data as CategoryEntity, json) as T;			case CategoryData:
			return categoryDataFromJson(data as CategoryData, json) as T;			case ShopEntity:
			return shopEntityFromJson(data as ShopEntity, json) as T;			case ShopData:
			return shopDataFromJson(data as ShopData, json) as T;			case ShopDetailEntity:
			return shopDetailEntityFromJson(data as ShopDetailEntity, json) as T;			case ShopDetailData:
			return shopDetailDataFromJson(data as ShopDetailData, json) as T;			case ShopDetailDataSetmeal:
			return shopDetailDataSetmealFromJson(data as ShopDetailDataSetmeal, json) as T;			case ShopDetailDataManystoretap:
			return shopDetailDataManystoretapFromJson(data as ShopDetailDataManystoretap, json) as T;			case ShopxEntity:
			return shopxEntityFromJson(data as ShopxEntity, json) as T;			case ShopxData:
			return shopxDataFromJson(data as ShopxData, json) as T;			case ShopxDataManystoretapsText:
			return shopxDataManystoretapsTextFromJson(data as ShopxDataManystoretapsText, json) as T;			case BannerEntity:
			return bannerEntityFromJson(data as BannerEntity, json) as T;			case BannerData:
			return bannerDataFromJson(data as BannerData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case CategoryEntity:
			return categoryEntityToJson(data as CategoryEntity);			case CategoryData:
			return categoryDataToJson(data as CategoryData);			case ShopEntity:
			return shopEntityToJson(data as ShopEntity);			case ShopData:
			return shopDataToJson(data as ShopData);			case ShopDetailEntity:
			return shopDetailEntityToJson(data as ShopDetailEntity);			case ShopDetailData:
			return shopDetailDataToJson(data as ShopDetailData);			case ShopDetailDataSetmeal:
			return shopDetailDataSetmealToJson(data as ShopDetailDataSetmeal);			case ShopDetailDataManystoretap:
			return shopDetailDataManystoretapToJson(data as ShopDetailDataManystoretap);			case ShopxEntity:
			return shopxEntityToJson(data as ShopxEntity);			case ShopxData:
			return shopxDataToJson(data as ShopxData);			case ShopxDataManystoretapsText:
			return shopxDataManystoretapsTextToJson(data as ShopxDataManystoretapsText);			case BannerEntity:
			return bannerEntityToJson(data as BannerEntity);			case BannerData:
			return bannerDataToJson(data as BannerData);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'CategoryEntity':
			return CategoryEntity().fromJson(json);			case 'CategoryData':
			return CategoryData().fromJson(json);			case 'ShopEntity':
			return ShopEntity().fromJson(json);			case 'ShopData':
			return ShopData().fromJson(json);			case 'ShopDetailEntity':
			return ShopDetailEntity().fromJson(json);			case 'ShopDetailData':
			return ShopDetailData().fromJson(json);			case 'ShopDetailDataSetmeal':
			return ShopDetailDataSetmeal().fromJson(json);			case 'ShopDetailDataManystoretap':
			return ShopDetailDataManystoretap().fromJson(json);			case 'ShopxEntity':
			return ShopxEntity().fromJson(json);			case 'ShopxData':
			return ShopxData().fromJson(json);			case 'ShopxDataManystoretapsText':
			return ShopxDataManystoretapsText().fromJson(json);			case 'BannerEntity':
			return BannerEntity().fromJson(json);			case 'BannerData':
			return BannerData().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'CategoryEntity':
			return List<CategoryEntity>();			case 'CategoryData':
			return List<CategoryData>();			case 'ShopEntity':
			return List<ShopEntity>();			case 'ShopData':
			return List<ShopData>();			case 'ShopDetailEntity':
			return List<ShopDetailEntity>();			case 'ShopDetailData':
			return List<ShopDetailData>();			case 'ShopDetailDataSetmeal':
			return List<ShopDetailDataSetmeal>();			case 'ShopDetailDataManystoretap':
			return List<ShopDetailDataManystoretap>();			case 'ShopxEntity':
			return List<ShopxEntity>();			case 'ShopxData':
			return List<ShopxData>();			case 'ShopxDataManystoretapsText':
			return List<ShopxDataManystoretapsText>();			case 'BannerEntity':
			return List<BannerEntity>();			case 'BannerData':
			return List<BannerData>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}