// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.

import 'package:shop/root/home/shop_entity.dart';
import 'package:shop/generated/json/shop_entity_helper.dart';
import 'package:shop/root/home/model/shop_detail_bean_entity.dart';
import 'package:shop/generated/json/shop_detail_bean_entity_helper.dart';
import 'package:shop/root/home/model/category_bean_entity.dart';
import 'package:shop/generated/json/category_bean_entity_helper.dart';
import 'package:shop/root/home/model/banner_bean_entity.dart';
import 'package:shop/generated/json/banner_bean_entity_helper.dart';
import 'package:shop/root/home/shopx_entity.dart';
import 'package:shop/generated/json/shopx_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {				case ShopEntity:
			return shopEntityFromJson(data as ShopEntity, json) as T;			case ShopData:
			return shopDataFromJson(data as ShopData, json) as T;			case ShopDetailBeanEntity:
			return shopDetailBeanEntityFromJson(data as ShopDetailBeanEntity, json) as T;			case ShopDetailBeanData:
			return shopDetailBeanDataFromJson(data as ShopDetailBeanData, json) as T;			case ShopDetailBeanDataSetmeal:
			return shopDetailBeanDataSetmealFromJson(data as ShopDetailBeanDataSetmeal, json) as T;			case ShopDetailBeanDataManystoretap:
			return shopDetailBeanDataManystoretapFromJson(data as ShopDetailBeanDataManystoretap, json) as T;			case ShopDetailBeanDataManystore:
			return shopDetailBeanDataManystoreFromJson(data as ShopDetailBeanDataManystore, json) as T;			case CategoryBeanEntity:
			return categoryBeanEntityFromJson(data as CategoryBeanEntity, json) as T;			case CategoryBeanData:
			return categoryBeanDataFromJson(data as CategoryBeanData, json) as T;			case BannerBeanEntity:
			return bannerBeanEntityFromJson(data as BannerBeanEntity, json) as T;			case BannerBeanData:
			return bannerBeanDataFromJson(data as BannerBeanData, json) as T;			case ShopxEntity:
			return shopxEntityFromJson(data as ShopxEntity, json) as T;			case ShopxData:
			return shopxDataFromJson(data as ShopxData, json) as T;			case ShopxDataManystoretapsText:
			return shopxDataManystoretapsTextFromJson(data as ShopxDataManystoretapsText, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
		case ShopEntity:
			return shopEntityToJson(data as ShopEntity);			case ShopData:
			return shopDataToJson(data as ShopData);			case ShopDetailBeanEntity:
			return shopDetailBeanEntityToJson(data as ShopDetailBeanEntity);			case ShopDetailBeanData:
			return shopDetailBeanDataToJson(data as ShopDetailBeanData);			case ShopDetailBeanDataSetmeal:
			return shopDetailBeanDataSetmealToJson(data as ShopDetailBeanDataSetmeal);			case ShopDetailBeanDataManystoretap:
			return shopDetailBeanDataManystoretapToJson(data as ShopDetailBeanDataManystoretap);			case ShopDetailBeanDataManystore:
			return shopDetailBeanDataManystoreToJson(data as ShopDetailBeanDataManystore);			case CategoryBeanEntity:
			return categoryBeanEntityToJson(data as CategoryBeanEntity);			case CategoryBeanData:
			return categoryBeanDataToJson(data as CategoryBeanData);			case BannerBeanEntity:
			return bannerBeanEntityToJson(data as BannerBeanEntity);			case BannerBeanData:
			return bannerBeanDataToJson(data as BannerBeanData);			case ShopxEntity:
			return shopxEntityToJson(data as ShopxEntity);			case ShopxData:
			return shopxDataToJson(data as ShopxData);			case ShopxDataManystoretapsText:
			return shopxDataManystoretapsTextToJson(data as ShopxDataManystoretapsText);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'ShopDetailEntity':

			return ShopEntity().fromJson(json);			case 'ShopData':
			return ShopData().fromJson(json);			case 'ShopDetailBeanEntity':
			return ShopDetailBeanEntity().fromJson(json);			case 'ShopDetailBeanData':
			return ShopDetailBeanData().fromJson(json);			case 'ShopDetailBeanDataSetmeal':
			return ShopDetailBeanDataSetmeal().fromJson(json);			case 'ShopDetailBeanDataManystoretap':
			return ShopDetailBeanDataManystoretap().fromJson(json);			case 'ShopDetailBeanDataManystore':
			return ShopDetailBeanDataManystore().fromJson(json);			case 'CategoryBeanEntity':
			return CategoryBeanEntity().fromJson(json);			case 'CategoryBeanData':
			return CategoryBeanData().fromJson(json);			case 'BannerBeanEntity':
			return BannerBeanEntity().fromJson(json);			case 'BannerBeanData':
			return BannerBeanData().fromJson(json);			case 'ShopxEntity':
			return ShopxEntity().fromJson(json);			case 'ShopxData':
			return ShopxData().fromJson(json);			case 'ShopxDataManystoretapsText':
			return ShopxDataManystoretapsText().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'ShopDetailEntity':

			return List<ShopEntity>();			case 'ShopData':
			return List<ShopData>();			case 'ShopDetailBeanEntity':
			return List<ShopDetailBeanEntity>();			case 'ShopDetailBeanData':
			return List<ShopDetailBeanData>();			case 'ShopDetailBeanDataSetmeal':
			return List<ShopDetailBeanDataSetmeal>();			case 'ShopDetailBeanDataManystoretap':
			return List<ShopDetailBeanDataManystoretap>();			case 'ShopDetailBeanDataManystore':
			return List<ShopDetailBeanDataManystore>();			case 'CategoryBeanEntity':
			return List<CategoryBeanEntity>();			case 'CategoryBeanData':
			return List<CategoryBeanData>();			case 'BannerBeanEntity':
			return List<BannerBeanEntity>();			case 'BannerBeanData':
			return List<BannerBeanData>();			case 'ShopxEntity':
			return List<ShopxEntity>();			case 'ShopxData':
			return List<ShopxData>();			case 'ShopxDataManystoretapsText':
			return List<ShopxDataManystoretapsText>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}